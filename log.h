/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: log.proto */

#ifndef PROTOBUF_C_log_2eproto__INCLUDED
#define PROTOBUF_C_log_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Events__LogMessage Events__LogMessage;


/* --- enums --- */

/*
 * / MessageType stores the destination of the message (corresponding to STDOUT or STDERR).
 */
typedef enum _Events__LogMessage__MessageType {
  EVENTS__LOG_MESSAGE__MESSAGE_TYPE__OUT = 1,
  EVENTS__LOG_MESSAGE__MESSAGE_TYPE__ERR = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENTS__LOG_MESSAGE__MESSAGE_TYPE)
} Events__LogMessage__MessageType;

/* --- messages --- */

/*
 * / A LogMessage contains a "log line" and associated metadata.
 */
struct  _Events__LogMessage
{
  ProtobufCMessage base;
  /*
   * / Bytes of the log message. (Note that it is not required to be a single line.)
   */
  ProtobufCBinaryData message;
  /*
   * / Type of the message (OUT or ERR).
   */
  Events__LogMessage__MessageType message_type;
  /*
   * / UNIX timestamp (in nanoseconds) when the log was written.
   */
  int64_t timestamp;
  /*
   * / Application that emitted the message (or to which the application is related).
   */
  char *app_id;
  /*
   * / Source of the message. For Cloud Foundry, this can be "APP", "RTR", "DEA", "STG", etc.
   */
  char *source_type;
  /*
   * / Instance that emitted the message.
   */
  char *source_instance;
};
#define EVENTS__LOG_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&events__log_message__descriptor) \
    , {0,NULL}, 0, 0, NULL, NULL, NULL }


/* Events__LogMessage methods */
void   events__log_message__init
                     (Events__LogMessage         *message);
size_t events__log_message__get_packed_size
                     (const Events__LogMessage   *message);
size_t events__log_message__pack
                     (const Events__LogMessage   *message,
                      uint8_t             *out);
size_t events__log_message__pack_to_buffer
                     (const Events__LogMessage   *message,
                      ProtobufCBuffer     *buffer);
Events__LogMessage *
       events__log_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   events__log_message__free_unpacked
                     (Events__LogMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Events__LogMessage_Closure)
                 (const Events__LogMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor events__log_message__descriptor;
extern const ProtobufCEnumDescriptor    events__log_message__message_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_log_2eproto__INCLUDED */
