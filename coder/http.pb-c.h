/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: http.proto */

#ifndef PROTOBUF_C_http_2eproto__INCLUDED
#define PROTOBUF_C_http_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "uuid.pb-c.h"

typedef struct _Events__HttpStart Events__HttpStart;
typedef struct _Events__HttpStop Events__HttpStop;
typedef struct _Events__HttpStartStop Events__HttpStartStop;


/* --- enums --- */

/*
 * / Type of peer handling request.
 */
typedef enum _Events__PeerType {
  /*
   * / Request is made by this process.
   */
  EVENTS__PEER_TYPE__Client = 1,
  /*
   * / Request is received by this process.
   */
  EVENTS__PEER_TYPE__Server = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENTS__PEER_TYPE)
} Events__PeerType;
/*
 * / HTTP method.
 */
typedef enum _Events__Method {
  EVENTS__METHOD__GET = 1,
  EVENTS__METHOD__POST = 2,
  EVENTS__METHOD__PUT = 3,
  EVENTS__METHOD__DELETE = 4,
  EVENTS__METHOD__HEAD = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVENTS__METHOD)
} Events__Method;

/* --- messages --- */

/*
 * / An HttpStart event is emitted when a client sends a request (or immediately when a server receives the request).
 */
struct  _Events__HttpStart
{
  ProtobufCMessage base;
  /*
   * / UNIX timestamp (in nanoseconds) when the request was sent (by a client) or received (by a server).
   */
  int64_t timestamp;
  /*
   * / ID for tracking lifecycle of request.
   */
  Events__UUID *requestid;
  /*
   * / Role of the emitting process in the request cycle.
   */
  Events__PeerType peertype;
  /*
   * / Method of the request.
   */
  Events__Method method;
  /*
   * / Destination of the request.
   */
  char *uri;
  /*
   * / Remote address of the request. (For a server, this should be the origin of the request.)
   */
  char *remoteaddress;
  /*
   * / Contents of the UserAgent header on the request.
   */
  char *useragent;
  /*
   * / If this request was made in order to service an incoming request, this field should track the ID of the parent.
   */
  Events__UUID *parentrequestid;
  /*
   * / If this request was made in relation to an appliciation, this field should track that application's ID.
   */
  Events__UUID *applicationid;
  /*
   * / Index of the application instance.
   */
  protobuf_c_boolean has_instanceindex;
  int32_t instanceindex;
  /*
   * / ID of the application instance.
   */
  char *instanceid;
};
#define EVENTS__HTTP_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&events__http_start__descriptor) \
    , 0, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, 0,0, NULL }


/*
 * / An HttpStop event is emitted when a client receives a response to its request (or when a server completes its handling and returns a response).
 */
struct  _Events__HttpStop
{
  ProtobufCMessage base;
  /*
   * / UNIX timestamp (in nanoseconds) when the request was received.
   */
  int64_t timestamp;
  /*
   * / URI of request.
   */
  char *uri;
  /*
   * / ID for tracking lifecycle of request. Should match requestId of a HttpStart event.
   */
  Events__UUID *requestid;
  /*
   * / Role of the emitting process in the request cycle.
   */
  Events__PeerType peertype;
  /*
   * / Status code returned with the response to the request.
   */
  int32_t statuscode;
  /*
   * / Length of response (bytes).
   */
  int64_t contentlength;
  /*
   * / If this request was made in relation to an appliciation, this field should track that application's ID.
   */
  Events__UUID *applicationid;
};
#define EVENTS__HTTP_STOP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&events__http_stop__descriptor) \
    , 0, NULL, NULL, 0, 0, 0, NULL }


/*
 * / An HttpStartStop event represents the whole lifecycle of an HTTP request.
 */
struct  _Events__HttpStartStop
{
  ProtobufCMessage base;
  /*
   * / UNIX timestamp (in nanoseconds) when the request was sent (by a client) or received (by a server).
   */
  int64_t starttimestamp;
  /*
   * / UNIX timestamp (in nanoseconds) when the request was received.
   */
  int64_t stoptimestamp;
  /*
   * / ID for tracking lifecycle of request. Should match requestId of a HttpStart event.
   */
  Events__UUID *requestid;
  /*
   * / Role of the emitting process in the request cycle.
   */
  Events__PeerType peertype;
  /*
   * / Method of the request.
   */
  Events__Method method;
  /*
   * / Destination of the request.
   */
  char *uri;
  /*
   * / Remote address of the request. (For a server, this should be the origin of the request.)
   */
  char *remoteaddress;
  /*
   * / Contents of the UserAgent header on the request.
   */
  char *useragent;
  /*
   * / Status code returned with the response to the request.
   */
  int32_t statuscode;
  /*
   * / Length of response (bytes).
   */
  int64_t contentlength;
  /*
   * / If this request was made in order to service an incoming request, this field should track the ID of the parent.
   */
  Events__UUID *parentrequestid;
  /*
   * / If this request was made in relation to an appliciation, this field should track that application's ID.
   */
  Events__UUID *applicationid;
  /*
   * / Index of the application instance.
   */
  protobuf_c_boolean has_instanceindex;
  int32_t instanceindex;
  /*
   * / ID of the application instance.
   */
  char *instanceid;
};
#define EVENTS__HTTP_START_STOP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&events__http_start_stop__descriptor) \
    , 0, 0, NULL, 0, 0, NULL, NULL, NULL, 0, 0, NULL, NULL, 0,0, NULL }


/* Events__HttpStart methods */
void   events__http_start__init
                     (Events__HttpStart         *message);
size_t events__http_start__get_packed_size
                     (const Events__HttpStart   *message);
size_t events__http_start__pack
                     (const Events__HttpStart   *message,
                      uint8_t             *out);
size_t events__http_start__pack_to_buffer
                     (const Events__HttpStart   *message,
                      ProtobufCBuffer     *buffer);
Events__HttpStart *
       events__http_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   events__http_start__free_unpacked
                     (Events__HttpStart *message,
                      ProtobufCAllocator *allocator);
/* Events__HttpStop methods */
void   events__http_stop__init
                     (Events__HttpStop         *message);
size_t events__http_stop__get_packed_size
                     (const Events__HttpStop   *message);
size_t events__http_stop__pack
                     (const Events__HttpStop   *message,
                      uint8_t             *out);
size_t events__http_stop__pack_to_buffer
                     (const Events__HttpStop   *message,
                      ProtobufCBuffer     *buffer);
Events__HttpStop *
       events__http_stop__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   events__http_stop__free_unpacked
                     (Events__HttpStop *message,
                      ProtobufCAllocator *allocator);
/* Events__HttpStartStop methods */
void   events__http_start_stop__init
                     (Events__HttpStartStop         *message);
size_t events__http_start_stop__get_packed_size
                     (const Events__HttpStartStop   *message);
size_t events__http_start_stop__pack
                     (const Events__HttpStartStop   *message,
                      uint8_t             *out);
size_t events__http_start_stop__pack_to_buffer
                     (const Events__HttpStartStop   *message,
                      ProtobufCBuffer     *buffer);
Events__HttpStartStop *
       events__http_start_stop__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   events__http_start_stop__free_unpacked
                     (Events__HttpStartStop *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Events__HttpStart_Closure)
                 (const Events__HttpStart *message,
                  void *closure_data);
typedef void (*Events__HttpStop_Closure)
                 (const Events__HttpStop *message,
                  void *closure_data);
typedef void (*Events__HttpStartStop_Closure)
                 (const Events__HttpStartStop *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    events__peer_type__descriptor;
extern const ProtobufCEnumDescriptor    events__method__descriptor;
extern const ProtobufCMessageDescriptor events__http_start__descriptor;
extern const ProtobufCMessageDescriptor events__http_stop__descriptor;
extern const ProtobufCMessageDescriptor events__http_start_stop__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_http_2eproto__INCLUDED */
