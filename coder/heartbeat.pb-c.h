/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: heartbeat.proto */

#ifndef PROTOBUF_C_heartbeat_2eproto__INCLUDED
#define PROTOBUF_C_heartbeat_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "uuid.pb-c.h"

typedef struct _Events__Heartbeat Events__Heartbeat;


/* --- enums --- */


/* --- messages --- */

/*
 * / A Heartbeat event both indicates liveness of the emitter, and communicates counts of events processed.
 */
struct  _Events__Heartbeat
{
  ProtobufCMessage base;
  /*
   * / Number of events sent by this emitter.
   */
  uint64_t sentcount;
  /*
   * / Number of events received by this emitter from the host process.
   */
  uint64_t receivedcount;
  /*
   * / Number of errors encountered while sending.
   */
  uint64_t errorcount;
  /*
   * / The id of the control message which requested this heartbeat
   */
  Events__UUID *controlmessageidentifier;
};
#define EVENTS__HEARTBEAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&events__heartbeat__descriptor) \
    , 0, 0, 0, NULL }


/* Events__Heartbeat methods */
void   events__heartbeat__init
                     (Events__Heartbeat         *message);
size_t events__heartbeat__get_packed_size
                     (const Events__Heartbeat   *message);
size_t events__heartbeat__pack
                     (const Events__Heartbeat   *message,
                      uint8_t             *out);
size_t events__heartbeat__pack_to_buffer
                     (const Events__Heartbeat   *message,
                      ProtobufCBuffer     *buffer);
Events__Heartbeat *
       events__heartbeat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   events__heartbeat__free_unpacked
                     (Events__Heartbeat *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Events__Heartbeat_Closure)
                 (const Events__Heartbeat *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor events__heartbeat__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_heartbeat_2eproto__INCLUDED */
