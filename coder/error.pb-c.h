/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: error.proto */

#ifndef PROTOBUF_C_error_2eproto__INCLUDED
#define PROTOBUF_C_error_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Events__Error Events__Error;


/* --- enums --- */


/* --- messages --- */

/*
 * / An Error event represents an error in the originating process.
 */
struct  _Events__Error
{
  ProtobufCMessage base;
  /*
   * / Source of the error. This may or may not be the same as the Origin in the envelope.
   */
  char *source;
  /*
   * / Numeric error code. This is provided for programmatic responses to the error.
   */
  int32_t code;
  /*
   * / Error description (preferably human-readable).
   */
  char *message;
};
#define EVENTS__ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&events__error__descriptor) \
    , NULL, 0, NULL }


/* Events__Error methods */
void   events__error__init
                     (Events__Error         *message);
size_t events__error__get_packed_size
                     (const Events__Error   *message);
size_t events__error__pack
                     (const Events__Error   *message,
                      uint8_t             *out);
size_t events__error__pack_to_buffer
                     (const Events__Error   *message,
                      ProtobufCBuffer     *buffer);
Events__Error *
       events__error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   events__error__free_unpacked
                     (Events__Error *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Events__Error_Closure)
                 (const Events__Error *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor events__error__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_error_2eproto__INCLUDED */
